w = the input is aways
    - every 18 positions a calc takes place
- input is 14 chars [1-9]{14}
- formula always the same except for values
- so what is the formula...?
- per input

       0     |     1    |     2    |   3       |    4     |    5     |   6      |   7      |    8     |   9      |   10      |   11      |   12     |   13
    -----------------------------------------------------------------------------------------------------------------------------------------------------------
    inp w    | inp w    | inp w    | inp w     | inp w    | inp w    | inp w    | inp w    | inp w    | inp w    | inp w     | inp w     | inp w    | inp w
    mul x 0  | mul x 0  | mul x 0  | mul x 0   | mul x 0  | mul x 0  | mul x 0  | mul x 0  | mul x 0  | mul x 0  | mul x 0   | mul x 0   | mul x 0  | mul x 0
    add x z  | add x z  | add x z  | add x z   | add x z  | add x z  | add x z  | add x z  | add x z  | add x z  | add x z   | add x z   | add x z  | add x z
    mod x 26 | mod x 26 | mod x 26 | mod x 26  | mod x 26 | mod x 26 | mod x 26 | mod x 26 | mod x 26 | mod x 26 | mod x 26  | mod x 26  | mod x 26 | mod x 26
Z:  div z 1  | div z 1  | div z 1  | div z 26  | div z 1  | div z 26 | div z 1  | div z 1  | div z 1  | div z 26 | div z 26  | div z 26  | div z 26 | div z 26
X:  add x 13 | add x 11 | add x 15 | add x -11 | add x 14 | add x 0  | add x 12 | add x 12 | add x 14 | add x -6 | add x -10 | add x -12 | add x -3 | add x -5
    eql x w  | eql x w  | eql x w  | eql x w   | eql x w  | eql x w  | eql x w  | eql x w  | eql x w  | eql x w  | eql x w   | eql x w   | eql x w  | eql x w
    eql x 0  | eql x 0  | eql x 0  | eql x 0   | eql x 0  | eql x 0  | eql x 0  | eql x 0  | eql x 0  | eql x 0  | eql x 0   | eql x 0   | eql x 0  | eql x 0
    mul y 0  | mul y 0  | mul y 0  | mul y 0   | mul y 0  | mul y 0  | mul y 0  | mul y 0  | mul y 0  | mul y 0  | mul y 0   | mul y 0   | mul y 0  | mul y 0
    add y 25 | add y 25 | add y 25 | add y 25  | add y 25 | add y 25 | add y 25 | add y 25 | add y 25 | add y 25 | add y 25  | add y 25  | add y 25 | add y 25
    mul y x  | mul y x  | mul y x  | mul y x   | mul y x  | mul y x  | mul y x  | mul y x  | mul y x  | mul y x  | mul y x   | mul y x   | mul y x  | mul y x
    add y 1  | add y 1  | add y 1  | add y 1   | add y 1  | add y 1  | add y 1  | add y 1  | add y 1  | add y 1  | add y 1   | add y 1   | add y 1  | add y 1
    mul z y  | mul z y  | mul z y  | mul z y   | mul z y  | mul z y  | mul z y  | mul z y  | mul z y  | mul z y  | mul z y   | mul z y   | mul z y  | mul z y
    mul y 0  | mul y 0  | mul y 0  | mul y 0   | mul y 0  | mul y 0  | mul y 0  | mul y 0  | mul y 0  | mul y 0  | mul y 0   | mul y 0   | mul y 0  | mul y 0
    add y w  | add y w  | add y w  | add y w   | add y w  | add y w  | add y w  | add y w  | add y w  | add y w  | add y w   | add y w   | add y w  | add y w
Y:  add y 13 | add y 10 | add y 5  | add y 14  | add y 5  | add y 15 | add y 4  | add y 11 | add y 1  | add y 15 | add y 12  | add y 8   | add y 14 | add y 9
    mul y x  | mul y x  | mul y x  | mul y x   | mul y x  | mul y x  | mul y x  | mul y x  | mul y x  | mul y x  | mul y x   | mul y x   | mul y x  | mul y x
    add z y  | add z y  | add z y  | add z y   | add z y  | add z y  | add z y  | add z y  | add z y  | add z y  | add z y   | add z y   | add z y  | add z y

z caries to next calc.
What does that imply?
    - backwards calc? as z will not have a start number?

more precice!

w always positive int [1-9]
z is the only value maintained across the calculations
x and y will be reinitialized every time
               w               x                   y                     z
0-----------------------------------------------------------------------------------------------
inp w    -->   w[1-9]                                                    z?
mul x 0  -->                   0
add x z  -->                   z
mod x 26 -->                  x%26
div z 1  -->                                                             z
add x 13 -->                 (x%26) + 13
eql x w  -->                   0                                                       why: -> x min = 13 and w max  = 9 so x = 0
eql x 0  -->                   1
mul y 0  -->                                        0
add y 25 -->                                        25
mul y x  -->                                        25
add y 1  -->                                        26
mul z y  -->                                                             26z
mul y 0  -->                                        0
add y w  -->                                        w
add y 13 -->                                        w + 13
mul y x  -->                                        w + 13 * 1
add z y  -->                                                             26z + w + 13 -> 26z = 13 + 26 -> 26z = 39 -> z = 39 % 26 != 0
1--------------w---------------x--------------------y---------------------z-------------------------
inp w1   --> w[1-9]                                                      26z + w + 13
mul x 0  -->                   0
add x z  -->                   z
mod x 26 -->                   x%26
div z 1  -->                                                              z
add x 11 -->                   x%26 + 11
eql x w  -->                     0
eql x 0  -->                     1
mul y 0  -->                                        0
add y 25 -->                                        25
mul y x  -->                                        25
add y 1  -->                                        26
mul z y  -->                                                              26z -> 26(26z + w + 13)
mul y 0  -->                                        0
add y w  -->                                        w
add y 10 -->                                        w + 10
mul y x  -->                                        w + 10
add z y  -->                                                              26(26z + w + 13) + w + 10
2---------------w---------------x--------------------y--------------------z-------------------------
inp w         w[1-9]                                                     26(26z + w + 13) + w + 10
mul x 0  -->                    0
add x z  -->                    z
mod x 26 -->                    z%26
div z 1  -->                                                              z
add x 15 -->                    z%26 + 15
eql x w  -->                    0
eql x 0  -->                    1
mul y 0  -->                                        0
add y 25 -->                                        25
mul y x  -->                                        25
add y 1  -->                                        26
mul z y  -->                                                              26z
mul y 0  -->                                        0
add y w  -->                                        w
add y 5  -->                                        w+5
mul y x  -->                                        w+5
add z y  -->                                                              26z + w + 5
3-----------------w-------------x-------------------y---------------------z------------------------->
inp w            w[1-9]
mul x 0  -->                    0
add x z  -->                    z
mod x 26 -->                    z%26
div z 26 -->                                                              z // 26 round down
add x -11-->                    z%26 - 11
eql x w  -->                    1 or 0
eql x 0  -->                    0 or 1
mul y 0  -->                                        0
add y 25 -->                                        25
mul y x  -->                                        0 or 25
add y 1  -->                                        1 or 26
mul z y  -->                                                            z // 26 or 26(z // 26)
mul y 0  -->                                        0
add y w  -->                                        w
add y 14 -->                                        w + 14
mul y x  -->                                        0 or w + 14
add z y  -->                                                             z // 26 or 26(z // 26) + w + 14
-----------------------------------------------------------------------------------------------

Looking further we see only these types of calculations

2 types of caclulations
7 of the one and 7 of the other!

Identified by either 'div z 26' or 'div z 1'

type 1      |    type 2
-----------------------------------------
'div z 1'   |    'div z 26'
26z+w+?     |    z // 26 or 26(z//26+w+?)

type 1 increases z about 26 times (huge increase)
type 2 decreases z about 26 times if we have the left calc and stays roughly the same of we have the right one
7 huge increases and 7 possible decreases or samesies
we need the round down! as the other increases every time! so the left one of type 2 is needed as that decreases a lot
and z needs to be zero at the end
how do we guarantee a decrease? that happens in type 2 calculations and only if
the (z%26)-X == w happends

Intermezzo / summerize:
- z is maintained throughout the whole run
- z is always modified
- type 1: z = 26z + w + ?
- type 2: z = z // 26
The question is in what conditions do we get z to be zero?
Conditions:
e.g (my first input that was different)
(z % 26) - 11 == w
In this case we can actually calculate what the value of z must be! nice so in 7 of the cases we know!
the other we just have to try :-) a lot less tries thatn 9**14
we only need to try 9**7 times which is about 5 milion times very nice!

We need the highest value so we need to count down from 9999999 to 9999998 etc

if every 4th command is
  - 'div z 1'  -> Type 1
  - 'div z 26' -> Type 2

if type 1 then we need the Y of the set of instructions (15th instruction)
if type 2 then we need the x of the instruction after the 'div z 26' (the negative or zero number and 5th command)
